using Microsoft.EntityFrameworkCore;
using supermarket_api.Domain.Models;

namespace supermarket_api.Persistence.Contexts
{
    public class AppDbContext : DbContext
    {

        public DbSet<Category> Categories { get; set; }
        public DbSet<Product> Products { get; set; }
        
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
            this.Database.EnsureCreated();
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            // SETTING CATEGORY TABLE
            
            // Setting build of the Category table (PK, FK and fields...)
            builder.Entity<Category>().ToTable("category");
            builder.Entity<Category>().HasKey(p => p.Id); // Setting primary key (Autogenerated)
            builder.Entity<Category>().Property(p => p.Id).IsRequired().ValueGeneratedOnAdd();
            builder.Entity<Category>().Property(p => p.Name).IsRequired().HasMaxLength(30); // Setting name field
            builder.Entity<Category>().HasMany(p => p.Products).WithOne(p => p.Category).HasForeignKey(p => p.CategoryId); // Setting foreign key with Products table

            // Adding Data manually for learning propouses...
            // Stored data is in spanish because i speak spanish lol...
            builder.Entity<Category>().HasData
            (
                new Category { Id = 100, Name = "Frutas y vegetales" }, // Id set manually due to in-memory provider
                new Category { Id = 101, Name = "Carnes" }
            );

            // SETTING PRODUCTS ENTITY TABLE
            builder.Entity<Product>().ToTable("product");
            builder.Entity<Product>().HasKey(p => p.Id);
            builder.Entity<Product>().Property(p => p.Id).IsRequired().ValueGeneratedOnAdd();
            builder.Entity<Product>().Property(p => p.Name).IsRequired().HasMaxLength(250);
            builder.Entity<Product>().Property(p => p.QuantityInPackage).IsRequired();
            builder.Entity<Product>().Property(p => p.UnitOfMeasurement).IsRequired();
        }
    }
}